unit
class Car
    import GRID in "GRID.t"
    export SetGrid, SetCarTitle, SetCarType, SetCarColor, CheckSpace, SetCarPosition, DrawSquare, DrawCar, DrawBackgroundSquare, EraseCar

    var carX : int := 1
    var carY : int := 1
    var CarType : string := "PinkCar"
    var col : int := 87
    var carSize : int := 2
    var direction : int := 1
    %% 1 = verticle, 2 = horizontal
    var grid : ^GRID
    var Grid : array 1 .. 6 of array 1 .. 6 of string
    
    proc SetGrid (input : ^GRID)
        grid := input
        Grid := ^grid.getGrid
    end SetGrid

    proc SetCarTitle (title : string)
        CarType := title
    end SetCarTitle

    proc SetCarType (Size, Direction : int)
        if Size = 2 or Size = 3 then
            carSize := Size
        end if
        if Direction = 1 or Direction = 2 then
            direction := Direction
        end if
    end SetCarType

    proc SetCarColor (c : int)
        col := c
    end SetCarColor

    function CheckSpace (x, y : int) : boolean
        var TempGrid : array 1 .. 6 of array 1 .. 6 of string := ^grid.getGrid
        %put "DIRECTION ", direction, " x,y: ", x, ",", y
        if direction = 1 then
            if (y - carSize + 1) <= 0 or y > 6 or x < 1 or x > 6 then
                result false
            end if
        else
            if (x - carSize + 1) <= 0 or x > 6 or y < 1 or y > 6 then
                result false
            end if
        end if
        if direction = 1 then
            if carSize = 2 then
                if TempGrid (x) (y) ~= "" or TempGrid (x) (y - 1) ~= "" then
                    result false
                end if
            elsif carSize = 3 then
                if TempGrid (x) (y) ~= "" or TempGrid (x) (y - 1) ~= "" or TempGrid (x) (y - 2) ~= "" then
                    result false
                end if
            end if
        elsif direction = 2 then
            if carSize = 2 then
                % put Grid (x) (y), " grid ", Grid (x - 1) (y)
                if TempGrid (x) (y) ~= "" or TempGrid (x - 1) (y) ~= "" then
                    result false
                end if
            elsif carSize = 3 then
                if TempGrid (x) (y) ~= "" or TempGrid (x - 1) (y) ~= "" or TempGrid (x - 2) (y) ~= "" then
                    result false
                end if
            end if
        end if
        result true
    end CheckSpace

    function CheckSpaceMove (x, y : int) : boolean
        var TempGrid : array 1 .. 6 of array 1 .. 6 of string := ^grid.getGrid
        %put "DIRECTION ", direction, " x,y: ", x, ",", y
        if direction = 1 then
            if (y - carSize + 1) <= 0 or y > 6 or x < 1 or x > 6 then
                result false
            end if
        else
            if (x - carSize + 1) <= 0 or x > 6 or y < 1 or y > 6 then
                result false
            end if
        end if
        if TempGrid (x) (y) ~= "" then
            result false
        end if
        result true
    end CheckSpaceMove

    procedure SetCarPosition (x, y : int)
        %locate (1, 1)
        %put "x: ", x, " y: ", y, " Grid: ", carX, ":", carY, " direction ", direction, " size ", carSize
        if CheckSpace (x, y) = true then
            carX := x
            carY := y
            Grid (carX) (carY) := CarType // here you want to set this to a pointer to the car itself, 
                                          // and not the car type probably, because then you can easily move it later :) 
                                          // something like
                                          
            var Car = ^this;              // No idea if you can do this in Turing, but it is an idea
            Grid (carX) (carY) := Car
            locate (10, 10)
            %put "x: ", x, " y: ", y, " Grid: ", carX, ":", carY, " direction ", direction
        else
            Grid (carX) (carY) := CarType
        end if
    end SetCarPosition

    proc SetMasterGrid
        if direction = 1 then
            if carSize = 2 then
                ^grid.updateSquare (carX, carY, CarType)
                ^grid.updateSquare (carX, carY - 1, CarType)
            elsif carSize = 3 then
                ^grid.updateSquare (carX, carY, CarType)
                ^grid.updateSquare (carX, carY - 1, CarType)
                ^grid.updateSquare (carX, carY - 2, CarType)
            end if
        elsif direction = 2 then
            if carSize = 2 then
                ^grid.updateSquare (carX, carY, CarType)
                ^grid.updateSquare (carX - 1, carY, CarType)
            elsif carSize = 3 then
                ^grid.updateSquare (carX, carY, CarType)
                ^grid.updateSquare (carX - 1, carY, CarType)
                ^grid.updateSquare (carX - 2, carY, CarType)
            end if
        end if
    end SetMasterGrid

    procedure DrawSquare (x, y : int)
        Draw.FillBox (75 * (x - 1) + 30, 75 * (y - 1) + 30, 75 * (x - 1) + 105, 75 * (y - 1) + 105, col)
    end DrawSquare

    procedure DrawBackgroundSquare (x, y : int)
        Draw.FillBox (75 * (x - 1) + 30, 75 * (y - 1) + 30, 75 * (x - 1) + 105, 75 * (y - 1) + 105, 8)
        Draw.Box (75 * (x - 1) + 30, 75 * (y - 1) + 30, 75 * (x - 1) + 105, 75 * (y - 1) + 105, black)
    end DrawBackgroundSquare

    proc DrawCar
        SetMasterGrid
        for i : 0 .. (carSize - 1)
            if direction = 1 then
                DrawSquare (carX, carY - i)
            else
                DrawSquare (carX - i, carY)
            end if
        end for
    end DrawCar

    proc EraseCar
        for i : 0 .. (carSize - 1)
            if direction = 1 then
                DrawBackgroundSquare (carX, carY - i)
            else
                DrawBackgroundSquare (carX - i, carY)
            end if
        end for
    end EraseCar

end Car
